# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'AnimeSearcher.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QImage, QPalette, QBrush
from PyQt5.QtCore import QSize
from PyQt5.QtWidgets import QMessageBox
import os
import re
import urllib.parse
import requests
import sys



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1126, 704)
        MainWindow.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setEnabled(True)
        self.groupBox.setGeometry(QtCore.QRect(10, 10, 681, 561))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.groupBox.setFont(font)
        self.groupBox.setTitle("")
        self.groupBox.setFlat(True)
        self.groupBox.setObjectName("groupBox")
        self.tioanimeOp = QtWidgets.QCheckBox(self.groupBox)
        self.tioanimeOp.setGeometry(QtCore.QRect(60, 170, 91, 21))
        self.tioanimeOp.setObjectName("tioanimeOp")
        self.SearchInput = QtWidgets.QTextEdit(self.groupBox)
        self.SearchInput.setGeometry(QtCore.QRect(60, 60, 251, 31))
        font = QtGui.QFont()
        font.setFamily("Candara Light")
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.SearchInput.setFont(font)
        self.SearchInput.setToolTip("")
        self.SearchInput.setStatusTip("Type anime name!")
        self.SearchInput.setAccessibleName("")
        self.SearchInput.setAccessibleDescription("")
        self.SearchInput.setAutoFillBackground(False)
        self.SearchInput.setCursorWidth(1)
        self.SearchInput.setObjectName("SearchInput")
        self.animeflvOp = QtWidgets.QCheckBox(self.groupBox)
        self.animeflvOp.setGeometry(QtCore.QRect(60, 110, 91, 21))
        self.animeflvOp.setObjectName("animeflvOp")
        self.animefenixOp = QtWidgets.QCheckBox(self.groupBox)
        self.animefenixOp.setGeometry(QtCore.QRect(60, 140, 101, 21))
        self.animefenixOp.setObjectName("animefenixOp")
        self.monoschinosOp = QtWidgets.QCheckBox(self.groupBox)
        self.monoschinosOp.setGeometry(QtCore.QRect(60, 200, 111, 21))
        self.monoschinosOp.setObjectName("monoschinosOp")
        self.Results = QtWidgets.QListWidget(self.groupBox)
        self.Results.setGeometry(QtCore.QRect(60, 270, 581, 241))
        self.Results.setAutoFillBackground(False)
        self.Results.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Results.setFrameShadow(QtWidgets.QFrame.Plain)
        self.Results.setMidLineWidth(0)
        self.Results.setBatchSize(100)
        self.Results.setSelectionRectVisible(False)
        self.Results.setObjectName("Results")
        self.resultLabel = QtWidgets.QLabel(self.groupBox)
        self.resultLabel.setGeometry(QtCore.QRect(60, 240, 581, 31))
        font = QtGui.QFont()
        font.setFamily("MS-Gothic-Mod")
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.resultLabel.setFont(font)
        self.resultLabel.setObjectName("resultLabel")
        self.openBrowser = QtWidgets.QRadioButton(self.groupBox)
        self.openBrowser.setEnabled(True)
        self.openBrowser.setGeometry(QtCore.QRect(350, 60, 200, 21))
        self.openBrowser.setAutoFillBackground(False)
        self.openBrowser.setChecked(False)
        self.openBrowser.setObjectName("openBrowser")
        self.searchButton = QtWidgets.QPushButton(self.groupBox)
        self.searchButton.setObjectName("searchButton")
        self.searchButton.setGeometry(QtCore.QRect(270, 60, 41, 31))
        self.steticImage = QtWidgets.QLabel(self.centralwidget)
        self.steticImage.setGeometry(QtCore.QRect(720, 10, 381, 561))
        self.steticImage.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.steticImage.setText("")
        self.steticImage.setObjectName("steticImage")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1126, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Custom
        self.anime = self.SearchInput.toPlainText()
        self.cap = ''
        self.urls = []
        nums = re.findall(r'\d+', self.anime)

        if len(nums) > 0:
            self.cap = nums[len(nums)-1]

        self.animeflvOp.stateChanged.connect(self.animeflvChecked)
        self.animefenixOp.stateChanged.connect(self.animefenixChecked)
        self.tioanimeOp.stateChanged.connect(self.tioanimeChecked)
        self.monoschinosOp.stateChanged.connect(self.monoschinosChecked)
        self.searchButton.clicked.connect(self.setQuery)

        oImage = QImage("C:/Users/Usuario/Desktop/Inform√°tica/Programacion/Python_programs/GUI/AnimeSearcherImages/background1.jpg")
        sImage = oImage.scaled(QSize(1126,704))                   # resize Image to widgets size
        palette = QPalette()
        palette.setBrush(QPalette.Window, QBrush(sImage))                        
        MainWindow.setPalette(palette)
        #MainWindow.setStyleSheet("background-image: url(AnimeSearcher/background.jpg)")
        self.checkedOps = []
        
        self.openInBrowser()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Anime Searcher"))
        self.tioanimeOp.setText(_translate("MainWindow", "TioAnime.com"))
        self.SearchInput.setPlaceholderText(_translate("MainWindow", "Search anime!"))
        self.animeflvOp.setText(_translate("MainWindow", "Animeflv.net"))
        self.animefenixOp.setText(_translate("MainWindow", "Animefenix.com"))
        self.monoschinosOp.setText(_translate("MainWindow", "Monoschinos.com"))
        self.Results.setStatusTip(_translate("MainWindow", "Search an anime and view results!"))
        self.resultLabel.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:16pt; font-weight:600; font-style:italic; color:#ff0c38;\">Result/&gt;</span></p></body></html>"))
        self.openBrowser.setText(_translate("MainWindow", "Open in browser"))
        self.searchButton.setText(_translate("MainWindow", ">", None))

    def animeflvChecked(self):
        self.checkedOps.append('https://www3.animeflv.net')

    def animefenixChecked(self):
        self.checkedOps.append('https://www.animefenix.com')

    def tioanimeChecked(self):
        self.checkedOps.append('https://tioanime.com')

    def monoschinosChecked(self):
        self.checkedOps.append('https://monoschinos.com')


    def typeOfSearch(self):
        if len(self.checkedOps) > 0:
            if self.isEpisode():
                for p in self.checkedOps:
                    self.SearchByEpisode(p)
            else:
                for p in self.checkedOps:
                    self.SearchAnime(p)
                    print(p)
        else:
            msg = QMessageBox()
            msg.setWindowTitle('Platform!')
            msg.setText('Please select the platform(s)')
            msg.setIcon(QMessageBox.Information)

            x = msg.exec_()


    def openInBrowser(self):
        # Open links in browser
        if self.openBrowser.isChecked():
            for p in self.urls:
                os.system('start ' + p)

    def setQuery(self):
        print('Debug! ', self.checkedOps)
        self.urls.clear()
        self.Results.clear()
        self.anime = self.SearchInput.toPlainText()
        if self.anime == '':
            msg = QMessageBox()
            msg.setWindowTitle('Anime')
            msg.setText('Please type your anime!')
            msg.setIcon(QMessageBox.Information)

            x = msg.exec_()

        else:
            self.typeOfSearch()
            self.openInBrowser()

    def isEpisode(self):
        # Determinar tipo de busqueda (consulta o capitulo)
        if len(self.cap) == 0:
            return False
        else:
            return True



    # If the self.anime is not found it probes some common parameters like tv and hd
    def ProbeOtherParameters(self, url):
        parameters = ['tv', 'hd']

        index = url.find('-' + self.cap)
        found = False
        for i in parameters:
            
            url = url[:index] + '-' + i + url[index:]
            print('Probando ' + url)

            if requests.get(url).status_code == 404:
                print('Pagina no encontrada.')
                print('Probando siguiente parametro...')

            else:
                print('Encontrado: ' + url)
                self.anime = url
                self.SearchByEpisode(platform)
                found = True
                break
        
        if not found:
            print('Anime o capitulo no encontrado')



    def SearchAnime(self, platform):
        #query = urllib.parse.quote(query) Dont work
        query = self.anime.replace(' ', '+')

        if platform == 'https://www3.animeflv.net':
            param = '/browse?q=' # Param for animeflv

        elif platform == 'https://www.animefenix.com': # Param for animefenix
            param = '/animes?q='

        elif platform == 'https://tioanime.com': # Param for tioanime
            param = '/directorio?q='

        elif platform == 'https://monoschinos.com': # Param for monoschinos
            param = '/search?q='


        url = platform + param + query

        self.Results.addItem(QtWidgets.QListWidgetItem(url))
        self.urls.append(url)
        print('A√±adido a la lista.')



    def SearchByEpisode(self, platform):
        query = self.anime.replace(' ', '-').lower()
        url = platform + '/ver/' + query

        print(requests.get(url).status_code) # Debug
        if requests.get(url).status_code == 404:
            print('Pagina no encontrada.')
            print('Probando con otros parametros...')
            self.ProbeOtherParameters(url)
            
        else:
            self.Results.addItem(QListWidgetItem(url))



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
